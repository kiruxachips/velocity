# main.py

import asyncio
import logging

from yookassa import Configuration, Payment
import config

from aiogram import types
from aiogram.client.bot import Bot
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Dispatcher
from aiogram.client.default import DefaultBotProperties

from quiz import register_quiz

logging.basicConfig(level=logging.INFO)

# 1) Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é"
menu_reply_kb = ReplyKeyboardMarkup(
    keyboard=[
        [ KeyboardButton(text="–ú–µ–Ω—é") ]
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
)

# 2) –§–∞–±—Ä–∏–∫–∞ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìö –ü–æ–¥–±–æ—Ä –∫—É—Ä—Å–∞", callback_data="quiz_start"),
            InlineKeyboardButton(
                text="üéì –ö—É—Ä—Å—ã",
                web_app=WebAppInfo(url="https://velocityschool.store/")
            ),
            InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu:contacts"),
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="menu:about"),
            InlineKeyboardButton(text="üîó –ü–æ–ª–µ–∑–Ω—ã–µ", callback_data="menu:links"),
        ],
        [
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="menu:clear"),
        ],
    ])

async def main():
    # 3) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YooKassa SDK
    Configuration.account_id = config.YOOKASSA_SHOP_ID
    Configuration.secret_key = config.YOOKASSA_SECRET_KEY

    # 4) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    if config.TELEGRAM_TOKEN is None:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ config.py")
    bot = Bot(
        token=config.TELEGRAM_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML")
    )
    dp = Dispatcher(storage=MemoryStorage())

    # 5) /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç inline-–º–µ–Ω—é –∏ Reply-–∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —à–∫–æ–ª—ã <b>Velocity</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_main_inline_kb()
        )
        await message.answer(
            "üëâ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ ¬´–ú–µ–Ω—é¬ª –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é —Å–Ω–æ–≤–∞.",
            reply_markup=menu_reply_kb
        )

    # 6) –ö–Ω–æ–ø–∫–∞ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "–ú–µ–Ω—é"
    @dp.message(lambda m: m.text == "–ú–µ–Ω—é")
    async def on_menu_button(message: types.Message):
        # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É /start
        await cmd_start(message)

    # 7) –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ inline-–º–µ–Ω—é
    @dp.callback_query(lambda c: c.data and c.data.startswith("menu:"))
    async def menu_router(cq: types.CallbackQuery):
        await cq.answer()
        if not cq.data:
            return
        action = cq.data.split(":", 1)[1]

        if not cq.message:
            return

        if action == "contacts":
            await cq.message.answer(
                "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n"
                "Telegram: @cookedbychief\n"
                "E-mail: support@velocityschool.ru\n"
                "–¢–µ–ª–µ—Ñ–æ–Ω: +7 963 299-87-02"
            )
        elif action == "about":
            await cq.message.answer(
                "‚ÑπÔ∏è <b>–û –Ω–∞—Å</b>\n"
                "Velocity ‚Äî –ø–µ—Ä–µ–¥–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ –∑–≤—É–∫–∞. "
                "–ü—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏ —É—á–∞—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É."
            )
        elif action == "links":
            links_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üåê –ù–∞—à —Å–∞–π—Ç", url="https://velocityschool.ru/")],
                [InlineKeyboardButton(text="üìö –î–∑–µ–Ω", url="https://dzen.ru/velocity")],
                [InlineKeyboardButton(text="üì± Instagram", url="https://instagram.com/velocity")],
            ])
            await cq.message.answer(
                "üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>",
                reply_markup=links_kb
            )
        else:  # clear
            # —É–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—á–∏—Å—Ç–∫–µ
            await cq.message.answer("üßπ –ß–∞—Ç –æ—á–∏—â–µ–Ω.")

    # 8) –û–±—Ä–∞–±–æ—Ç–∫–∞ WebApp-–¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    @dp.message(lambda m: m.web_app_data is not None)
    async def webapp_handler(message: types.Message):
        data_str = getattr(getattr(message, "web_app_data", None), "data", None)
        logging.info("üïµÔ∏è‚Äç‚ôÇÔ∏è web_app_data arrived: %r", data_str)
        if not data_str:
            return await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp.")

        try:
            course_key, tariff_key = data_str.split(":", 1)
        except ValueError:
            return await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp.")

        titles = {
            "sound_engineer": "–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä —Å –Ω—É–ª—è",
            "beatmaker":      "–ë–∏—Ç–º–µ–π–∫–µ—Ä —Å –Ω—É–ª—è",
            "sound_designer": "–°–∞—É–Ω–¥-–¥–∏–∑–∞–π–Ω–µ—Ä —Å –Ω—É–ª—è",
        }
        prices_map = {
            "sound_engineer": {"pro": 37500, "intro": 24000, "single": 2500},
            "beatmaker":      {"pro": 30000, "intro": 16000, "single": 2500},
            "sound_designer": {"pro": 40000, "intro": 28000, "single": 2500},
        }

        if course_key not in titles or tariff_key not in prices_map.get(course_key, {}):
            return await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å –∏–ª–∏ —Ç–∞—Ä–∏—Ñ.")

        title = titles[course_key]
        label = tariff_key.upper() if tariff_key != "single" else "–†–∞–∑–æ–≤—ã–π"
        amount = prices_map[course_key][tariff_key]

        payment = Payment.create({
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://velocityschool.store/return"
            },
            "capture": True,
            "description": f"{title} ‚Äî {label}"
        })

        pay_url = None
        if payment and hasattr(payment, "confirmation") and payment.confirmation:
            pay_url = getattr(payment.confirmation, "confirmation_url", None)
        if not pay_url:
            return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        pay_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url)]
        ])

        await message.answer(
            f"–í–∞—à –∑–∞–∫–∞–∑: <b>{title} ‚Äî {label}</b>\n"
            f"–°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:",
            reply_markup=pay_kb
        )

    # 9) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ quiz.py
    register_quiz(dp)

    logging.info("üöÄ Velocity-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())