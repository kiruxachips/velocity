# main.py

import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    LabeledPrice,
    PreCheckoutQuery,
    ContentType,
)
from config import TELEGRAM_TOKEN, YOOKASSA_PROVIDER_TOKEN

logging.basicConfig(level=logging.INFO)


async def main():
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher()

    # 1) /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéì –ö—É—Ä—Å—ã",
                    web_app=WebAppInfo(url="https://velocityschool.store")
                ),
                InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="menu:contacts"),
            ],
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="menu:about"),
                InlineKeyboardButton(text="üîó –ü–æ–ª–µ–∑–Ω—ã–µ", callback_data="menu:links"),
            ],
            [
                InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="menu:clear"),
            ],
        ])
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —à–∫–æ–ª—ã *Velocity*.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    # 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
    @dp.callback_query(lambda c: c.data and c.data.startswith("menu:"))
    async def menu_router(cq: types.CallbackQuery):
        action = cq.data.split(":", 1)[1]
        await cq.answer()

        if action == "contacts":
            await cq.message.answer(
                "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã*\n"
                "–ú–µ–Ω–µ–¥–∂–µ—Ä: @YourSupportChat\n"
                "E-mail: support@velocity.ru\n"
                "–¢–µ–ª–µ—Ñ–æ–Ω: +7 123 456-78-90",
                parse_mode="Markdown"
            )

        elif action == "about":
            await cq.message.answer(
                "‚ÑπÔ∏è *–û –Ω–∞—Å*\n"
                "Velocity ‚Äî –ø–µ—Ä–µ–¥–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ –∑–≤—É–∫–∞. "
                "–ü—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏ —É—á–∞—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É.",
                parse_mode="Markdown"
            )

        elif action == "links":
            links_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üåê –ù–∞—à —Å–∞–π—Ç", url="https://velocityschool.store")],
                [InlineKeyboardButton(text="üé• YouTube",  url="https://youtube.com/velocity")],
                [InlineKeyboardButton(text="üì± Instagram", url="https://instagram.com/velocity")],
            ])
            await cq.message.answer(
                "üîó *–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*",
                parse_mode="Markdown",
                reply_markup=links_kb
            )

        elif action == "clear":
            await cq.message.edit_reply_markup(None)
            await cq.message.answer("üßπ –ß–∞—Ç –æ—á–∏—â–µ–Ω.")

    # 3) –ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App ‚Üí —à–ª—ë–º –ÆKassa-–∏–Ω–≤–æ–π—Å
    @dp.message(lambda m: m.web_app_data is not None)
    async def webapp_handler(message: types.Message):
        course_key, tariff_key = message.web_app_data.data.split(":", 1)

        titles = {
            "sound_engineer": "–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä —Å –Ω—É–ª—è",
            "beatmaker":      "–ë–∏—Ç–º–µ–π–∫–µ—Ä —Å –Ω—É–ª—è",
            "sound_designer": "–°–∞—É–Ω–¥-–¥–∏–∑–∞–π–Ω–µ—Ä —Å –Ω—É–ª—è",
        }
        prices_map = {
            "sound_engineer": {"pro": 37500, "intro": 24000, "single": 2500},
            "beatmaker":      {"pro": 30000, "intro": 16000, "single": 2500},
            "sound_designer": {"pro": 40000, "intro": 28000, "single": 2500},
        }

        title = titles[course_key]
        label = tariff_key.upper() if tariff_key != "single" else "–†–∞–∑–æ–≤—ã–π"
        amount = prices_map[course_key][tariff_key]

        prices = [LabeledPrice(label=f"{title} ‚Äî {label}", amount=amount * 100)]
        await bot.send_invoice(
            chat_id=message.chat.id,
            title=f"{title} ‚Äî {label}",
            description="–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É Velocity",
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="buy_velocity_course",
            payload=f"{course_key}:{tariff_key}",
        )

    # 4) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É
    @dp.pre_checkout_query()
    async def process_pre_checkout(query: PreCheckoutQuery):
        await bot.answer_pre_checkout_query(query.id, ok=True)

    # 5) –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    @dp.message(lambda m: m.content_type == ContentType.SUCCESSFUL_PAYMENT)
    async def successful_payment(message: types.Message):
        await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –°–∫–æ—Ä–æ –≤—ã—à–ª—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")

    logging.info("üöÄ Velocity-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())