# quiz.py
"""
–ú–æ–¥—É–ª—å –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –¥–ª—è Telegram-–±–æ—Ç–∞ Velocity.
–°–æ–¥–µ—Ä–∂–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ "–ö–∞–∫–æ–π –∫—É—Ä—Å –ø–æ–¥–æ–π–¥—ë—Ç —Ç–µ–±–µ?".
"""
from collections import Counter

from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter


class QuizStates(StatesGroup):
    branch = State()  # –∑–≤—É–∫ –∏–ª–∏ –≤–∏–∑—É–∞–ª
    q2     = State()  # –≤–æ–ø—Ä–æ—Å 2
    q3     = State()  # –≤–æ–ø—Ä–æ—Å 3
    q4     = State()  # –≤–æ–ø—Ä–æ—Å 4


def register_quiz(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–≤–∏–∑–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ dp.
    """

    @dp.callback_query(lambda c: c.data == 'quiz_start')
    async def quiz_start(cq: types.CallbackQuery, state: FSMContext):
        await cq.answer()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        await state.update_data(answers={})
        await state.set_state(QuizStates.branch)
        # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîä –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–≤—É–∫–æ–º", callback_data="sound")],
            [InlineKeyboardButton(text="üé® –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–∑—É–∞–ª–æ–º", callback_data="visual")],
        ])
        await cq.message.answer(
            "üìç –¢—ã —Å—Ç–æ–∏—à—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ. –¢–µ–±–µ –¥–∞—é—Ç —Å—É–ø–µ—Ä—Å–∏–ª—É. –ö–∞–∫—É—é –≤—ã–±–µ—Ä–µ—à—å?",
            reply_markup=kb
        )

    @dp.callback_query(StateFilter(QuizStates.branch))
    async def branch_chosen(cq: types.CallbackQuery, state: FSMContext):
        await cq.answer()
        choice = cq.data  # 'sound' –∏–ª–∏ 'visual'
        data = await state.get_data()
        data['answers']['branch'] = choice
        await state.update_data(data)

        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ç–∫–∏
        if choice == 'sound':
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéµ –î–µ–ª–∞—Ç—å –º—É–∑—ã–∫—É —Å –Ω—É–ª—è", callback_data="beatmaking")],
                [InlineKeyboardButton(text="‚öôÔ∏è –°–≤–æ–¥–∏—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—É–∫", callback_data="sound_engineering")],
                [InlineKeyboardButton(text="üîä –°–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∏–≥—Ä/—Ñ–∏–ª—å–º–æ–≤", callback_data="sound_design")],
            ])
            text = "üîâ –ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–±–µ –±–ª–∏–∂–µ?"
        else:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÉ –ü–æ—Å—Ç–µ—Ä—ã –∏ –±—Ä–µ–Ω–¥-–≤–∏–∑—É–∞–ª", callback_data="graphic")],
                [InlineKeyboardButton(text="üñ• 3D-–º–æ–¥–µ–ª–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è", callback_data="three_d")],
                [InlineKeyboardButton(text="üèõ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="architecture")],
            ])
            text = "üß© –ö–∞–∫–∏–µ –æ–±—Ä–∞–∑—ã –≤—ã–∑—ã–≤–∞—é—Ç —É —Ç–µ–±—è –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞?"

        await cq.message.answer(text, reply_markup=kb)
        await state.set_state(QuizStates.q2)

    @dp.callback_query(StateFilter(QuizStates.q2))
    async def q2_handler(cq: types.CallbackQuery, state: FSMContext):
        await cq.answer()
        choice = cq.data
        data = await state.get_data()
        data['answers']['q2'] = choice
        await state.update_data(data)

        branch = data['answers']['branch']
        if branch == 'sound':
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí° –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∏ —Å–æ—á–∏–Ω—è—Ç—å", callback_data="creative")],
                [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏ –¥–æ–≤–æ–¥–∏—Ç—å –¥–æ –∏–¥–µ–∞–ª–∞", callback_data="technical")],
                [InlineKeyboardButton(text="üöÄ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏ —É–¥–∏–≤–ª—è—Ç—å", callback_data="experimental")],
            ])
            text = "üéõ –ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–¥–∞—á —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ?"
        else:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üé® –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–∞ –∏ —à—Ä–∏—Ñ—Ç—ã", callback_data="graphic")],
                [InlineKeyboardButton(text="üì∏ –í—Ä–∞—â–∞—Ç—å –∫–∞–º–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å–≤–µ—Ç", callback_data="three_d")],
                [InlineKeyboardButton(text="üó∫ –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—á–Ω–æ –∏ –∫—Ä–∞—Å–∏–≤–æ", callback_data="architecture")],
            ])
            text = "üõ† –ß—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ?"

        await cq.message.answer(text, reply_markup=kb)
        await state.set_state(QuizStates.q3)

    @dp.callback_query(StateFilter(QuizStates.q3))
    async def q3_handler(cq: types.CallbackQuery, state: FSMContext):
        await cq.answer()
        choice = cq.data
        data = await state.get_data()
        data['answers']['q3'] = choice
        await state.update_data(data)

        branch = data['answers']['branch']
        if branch == 'sound':
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="ü™© –ù–µ–º–Ω–æ–≥–æ –ø–∏—Å–∞–ª –º—É–∑—ã–∫—É / –∫—Ä—É—Ç–∏–ª –±–∏—Ç—ã", callback_data="tried_music")],
                [InlineKeyboardButton(text="üéö –ó–Ω–∞–∫–æ–º —Å–æ —Å–≤–µ–¥–µ–Ω–∏–µ–º ‚Äî —Ö–æ—á—É –≥–ª—É–±–∂–µ", callback_data="tried_engineering")],
                [InlineKeyboardButton(text="‚ùì –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª, –Ω–æ —Ö–æ—á–µ—Ç—Å—è", callback_data="never_tried")],
            ])
            text = "üéß –ß—Ç–æ —Ç—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª?"
        else:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üñå Photoshop / Canva / Figma", callback_data="graphic")],
                [InlineKeyboardButton(text="üîÑ –ò–≥—Ä–∞–ª—Å—è —Å 3D-—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º–∏", callback_data="three_d")],
                [InlineKeyboardButton(text="üìê –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª, –Ω–æ —Ç—è–Ω–µ—Ç –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É", callback_data="architecture")],
            ])
            text = "üìö –° —á–µ–º —Ç—ã —É–∂–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è?"

        await cq.message.answer(text, reply_markup=kb)
        await state.set_state(QuizStates.q4)

    @dp.callback_query(StateFilter(QuizStates.q4))
    async def q4_handler(cq: types.CallbackQuery, state: FSMContext):
        await cq.answer()
        choice = cq.data
        data = await state.get_data()
        data['answers']['q4'] = choice
        answers = data['answers']

        # –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if answers['branch'] == 'sound':
            votes = [
                answers['q2'],
                'beatmaking' if answers['q3']=='creative'
                else 'sound_engineering' if answers['q3']=='technical'
                else 'sound_design',
                'beatmaking' if answers['q4']=='tried_music'
                else 'sound_engineering' if answers['q4']=='tried_engineering'
                else 'sound_design',
            ]
            course_map = {
                'beatmaking': 'üéì –ë–∏—Ç–º–µ–π–∫–∏–Ω–≥',
                'sound_engineering': 'üéì –ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—É—Ä–∞',
                'sound_design': 'üéì –°–∞—É–Ω–¥-–¥–∏–∑–∞–π–Ω'
            }
        else:
            votes = [answers['q2'], answers['q3'], answers['q4']]
            course_map = {
                'graphic': 'üéì –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω',
                'three_d': 'üéì 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'architecture': 'üéì –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
            }

        most_common = Counter(votes).most_common(1)[0][0]
        recommendation = course_map.get(most_common, 'üéì –ù–∞—à –∫—É—Ä—Å')

        await cq.message.answer(
            f"üî• –ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?\n–¢–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫—É—Ä—Å:\nüëâ {recommendation}"
        )
        await state.clear()